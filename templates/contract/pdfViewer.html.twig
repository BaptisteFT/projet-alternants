{% extends "base.html.twig" %}
{% block head %}
    {{ parent() }}
    <script src="https://unpkg.com/pdf-lib"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous">
    <link rel="stylesheet" href="{{ asset('css/style.css') }}" />
    <title> Projet Alternant</title>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js" integrity="sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0" crossorigin="anonymous"></script>
{% endblock %}
{% block header %}
    {{ parent() }}
{% endblock %}
{% block content %}
<body style="background-color:rgb(221, 247, 242)";>
    <div>
        {% if contract.user.status == "CONTRACT_SEND" %}
            
            

             <ul  style="margin-left:5% ; list-style-type: none; margin-top:3% ; font-family:'Trebuchet MS'" >
                  <li >
                  <a class="nav-link" style="color:black" href="{{ path('update_contract_form', {userId: contract.user.id }) }}">
                  <i class="fa fa-edit fa-lg" style="color: rgb(7, 12, 85);"></i> Editer
                  </a>
                  </li>
                  
                  <li>
                  <a class="nav-link"  style="color:black" href="{{ path('app_index_index') }}"> 
                  <i class="fa fa-arrow-left fa-lg" style="color: rgb(7, 12, 85);"></i>
                  Revenir à l'index
                  </a>
                  </li>
  
          </ul>

          


           

        {% elseif contract.user.status == "RESEARCH" %}
            <ul  style="margin-left:5% ; list-style-type: none; margin-top:3% ; font-family:'Trebuchet MS'" >
                  <li style="margin-left:12px" >
                    <button onclick=" return savePdfForm()" class="btn" style="font-weight: bold; color: white; font-size: 16px; font-family:'Trebuchet MS'; background-color : #0B317D;"> Valider</button>
                  </li>
                  
                  <li>
                  <a class="nav-link"  style="color:black" href="{{ path('update_contract_form', {userId: contract.user.id }) }}"> 
                  <i class="fa fa-arrow-left fa-lg" style="color: rgb(7, 12, 85);"></i>
                  Revenir au formulaire
                  </a>
                  </li>
  
          </ul>
        {% endif %}
    </div>

    <main>
        <embed id=pdf src="" width="100%" height="800px" />
    </main>

    <script>
        fillPdfForm();

        async function savePdfForm(){
            const url = "{{ absolute_url(asset('pdf/pre-convention.pdf')) }}";
            const formPdfBytes = await fetch(url).then(res => res.arrayBuffer())
            const pdfDoc = await PDFLib.PDFDocument.load(formPdfBytes);
            const form = pdfDoc.getForm()

            /*
            const fields = form.getFields();
            fields.forEach(field => {
                const type = field.constructor.name
                const name = field.getName()
                console.log(`${name}`)
            })
            */


            const repCivility = '{{ contract.representativeCivility }}';
            if (repCivility === 'false'){
                const repCivCheckBox = form.getCheckBox('Case à cocher 12')
                repCivCheckBox.check()
            }
            else{
                const repCivCheckBox = form.getCheckBox('Case à cocher 13')
                repCivCheckBox.check()
            }

            const tutorCivility = '{{ contract.tutorCivility }}';
            if (tutorCivility === 'false'){
                const tutorCivCheckBox = form.getCheckBox('Case à cocher 18')
                tutorCivCheckBox.check()
            }
            else{
                const tutorCivCheckBox = form.getCheckBox('Case à cocher 19')
                tutorCivCheckBox.check()
            }

            const studentCivility = 'false';
            if (studentCivility === 'false'){
                const studentCivCheckBox = form.getCheckBox('Case à cocher 14')
                studentCivCheckBox.check()
            }
            else{
                const studentCivCheckBox = form.getCheckBox('Case à cocher 15')
                studentCivCheckBox.check()
            }

            const contracType = '{{ contract.contractType }}';
            if (contracType === 'APR'){
                const contractTypeCheckBox = form.getCheckBox('Case à cocher 7')
                contractTypeCheckBox.check()
            }
            else if (contracType === 'PRO'){
                const contractTypeCheckBox = form.getCheckBox('Case à cocher 9')
                contractTypeCheckBox.check()
            }
            else if (contractType === 'AUT'){
                const contractTypeCheckBox = form.getCheckBox('Case à cocher 10')
                contractTypeCheckBox.check()
            }

            const socialReason = form.getTextField('Parcours 2')
            const siretNumber = form.getTextField('Mention 2')
            const activity = form.getTextField('Parcours 3')
            const locationStreet = form.getTextField('Parcours 4')
            const locationCity = form.getTextField('Mention 3')
            const postalCode = form.getTextField('Parcours 5')
            const phoneNumber = form.getTextField('Parcours 6')
            const contractEmail = form.getTextField('Parcours 7')
            const representativeFirstName = form.getTextField('Parcours 8')
            const representativeLastName = form.getTextField('Mention 4')
            const representativeRole = form.getTextField('Parcours 9')
            const representativeEmail = form.getTextField('Parcours 10')
            const otherSocialReason = form.getTextField('Parcours 11')
            const otherLocationStreet = form.getTextField('Mention 5')
            const otherLocationCity = form.getTextField('Parcours 12')
            const otherPostalCode = form.getTextField('Parcours 13')
            const otherPhoneNumber = form.getTextField('Parcours 14')
            const workerRole = form.getTextField('Parcours 16')
            const startDate = form.getTextField('Mention 7')
            const endDate = form.getTextField('Parcours 17')
            const tutorFirstName = form.getTextField('Parcours 24')
            const tutorLastName = form.getTextField('Mention 10')
            const tutorRole = form.getTextField('Parcours 25')
            const tutorEmail = form.getTextField('Parcours 27')
            const tutorPhoneNumber = form.getTextField('Parcours 26')
            const studentFirstName = form.getTextField('Parcours 15')
            const studentLastName = form.getTextField('Mention 6')
            const studentEmail = form.getTextField('Parcours 37')

            /* Résolution de bug (2 champs présent dans le pdf de base s'efface)
            const repUnivFirstName = form.getTextField('Parcours 21')
            const repUnivLastName = form.getTextField('Mention 9')
            repUnivFirstName.setText('David')
            repUnivLastName.setText('Telisson')
             */

            studentFirstName.setText('{{ contract.user.firstName }}')
            studentLastName.setText('{{ contract.user.lastName }}')
            studentEmail.setText('{{ contract.user.userName }}')
            socialReason.setText('{{ contract.socialReason }}')
            siretNumber.setText('{{ contract.siretNumber }}')
            activity.setText('{{ contract.activity }}')
            locationStreet.setText('{{ contract.locationStreet }}')
            postalCode.setText('{{ contract.postalCode }}')
            phoneNumber.setText('{{ contract.phoneNumber }}')
            locationCity.setText('{{ contract.locationCity }}')
            contractEmail.setText('{{ contract.contractEmail }}')
            representativeFirstName.setText('{{ contract.representativeFirstName }}')
            representativeLastName.setText('{{ contract.representativeLastName }}')
            representativeRole.setText('{{ contract.representativeRole }}')
            representativeEmail.setText('{{ contract.representativeEmail }}')
            otherSocialReason.setText('{{ contract.otherSocialReason }}')
            otherLocationStreet.setText('{{ contract.otherLocationStreet }}')
            otherLocationCity.setText('{{ contract.otherLocationCity }}')
            otherPostalCode.setText('{{ contract.otherPostalCode }}')
            otherPhoneNumber.setText('{{ contract.otherPhoneNumber }}')
            workerRole.setText('{{ contract.workerRole }}')
            startDate.setText('{{ contract.contractStartDate|date("m/d/Y") }}')
            endDate.setText('{{ contract.contractEndDate|date("m/d/Y") }}')
            tutorFirstName.setText('{{ contract.tutorFirstName }}')
            tutorLastName.setText('{{ contract.tutorLastName }}')
            tutorRole.setText('{{ contract.tutorRole }}')
            tutorEmail.setText('{{ contract.tutorEmail }}')
            tutorPhoneNumber.setText('{{ contract.tutorPhoneNumber }}')

            const base64String = await pdfDoc.saveAsBase64()

            $.post("{{ path('save_pdf',{contractId : contract.id }) }}",base64String,function(result){
                $(location).attr('href', '{{ path('validate_pdf',{contractId : contract.id }) }}')
            });


        }

        async function fillPdfForm(){
            const url = "{{ absolute_url(asset('pdf/pre-convention.pdf')) }}";
            const formPdfBytes = await fetch(url).then(res => res.arrayBuffer())
            const pdfDoc = await PDFLib.PDFDocument.load(formPdfBytes);
            const form = pdfDoc.getForm()

            /*
            const fields = form.getFields();
            fields.forEach(field => {
                const type = field.constructor.name
                const name = field.getName()
                console.log(`${name}`)
            })
            */


            const repCivility = '{{ contract.representativeCivility }}';
            if (repCivility === 'false'){
                const repCivCheckBox = form.getCheckBox('Case à cocher 12')
                repCivCheckBox.check()
            }
            else{
                const repCivCheckBox = form.getCheckBox('Case à cocher 13')
                repCivCheckBox.check()
            }

            const tutorCivility = '{{ contract.tutorCivility }}';
            if (tutorCivility === 'false'){
                const tutorCivCheckBox = form.getCheckBox('Case à cocher 18')
                tutorCivCheckBox.check()
            }
            else{
                const tutorCivCheckBox = form.getCheckBox('Case à cocher 19')
                tutorCivCheckBox.check()
            }

            const studentCivility = 'false';
            if (studentCivility === 'false'){
                const studentCivCheckBox = form.getCheckBox('Case à cocher 14')
                studentCivCheckBox.check()
            }
            else{
                const studentCivCheckBox = form.getCheckBox('Case à cocher 15')
                studentCivCheckBox.check()
            }

            const contracType = '{{ contract.contractType }}';
            if (contracType === 'APR'){
                const contractTypeCheckBox = form.getCheckBox('Case à cocher 7')
                contractTypeCheckBox.check()
            }
            else if (contracType === 'PRO'){
                const contractTypeCheckBox = form.getCheckBox('Case à cocher 9')
                contractTypeCheckBox.check()
            }
            else if (contractType === 'AUT'){
                const contractTypeCheckBox = form.getCheckBox('Case à cocher 10')
                contractTypeCheckBox.check()
            }

            const socialReason = form.getTextField('Parcours 2')
            const siretNumber = form.getTextField('Mention 2')
            const activity = form.getTextField('Parcours 3')
            const locationStreet = form.getTextField('Parcours 4')
            const locationCity = form.getTextField('Mention 3')
            const postalCode = form.getTextField('Parcours 5')
            const phoneNumber = form.getTextField('Parcours 6')
            const contractEmail = form.getTextField('Parcours 7')
            const representativeFirstName = form.getTextField('Parcours 8')
            const representativeLastName = form.getTextField('Mention 4')
            const representativeRole = form.getTextField('Parcours 9')
            const representativeEmail = form.getTextField('Parcours 10')
            const otherSocialReason = form.getTextField('Parcours 11')
            const otherLocationStreet = form.getTextField('Mention 5')
            const otherLocationCity = form.getTextField('Parcours 12')
            const otherPostalCode = form.getTextField('Parcours 13')
            const otherPhoneNumber = form.getTextField('Parcours 14')
            const workerRole = form.getTextField('Parcours 16')
            const startDate = form.getTextField('Mention 7')
            const endDate = form.getTextField('Parcours 17')
            const tutorFirstName = form.getTextField('Parcours 24')
            const tutorLastName = form.getTextField('Mention 10')
            const tutorRole = form.getTextField('Parcours 25')
            const tutorEmail = form.getTextField('Parcours 27')
            const tutorPhoneNumber = form.getTextField('Parcours 26')
            const studentFirstName = form.getTextField('Parcours 15')
            const studentLastName = form.getTextField('Mention 6')
            const studentEmail = form.getTextField('Parcours 37')

            /* Résolution de bug (2 champs présent dans le pdf de base s'efface)
            const repUnivFirstName = form.getTextField('Parcours 21')
            const repUnivLastName = form.getTextField('Mention 9')
            repUnivFirstName.setText('David')
            repUnivLastName.setText('Telisson')
             */

            studentFirstName.setText('{{ contract.user.firstName }}')
            studentLastName.setText('{{ contract.user.lastName }}')
            studentEmail.setText('{{ contract.user.userName }}')
            socialReason.setText('{{ contract.socialReason }}')
            siretNumber.setText('{{ contract.siretNumber }}')
            activity.setText('{{ contract.activity }}')
            locationStreet.setText('{{ contract.locationStreet }}')
            postalCode.setText('{{ contract.postalCode }}')
            phoneNumber.setText('{{ contract.phoneNumber }}')
            locationCity.setText('{{ contract.locationCity }}')
            contractEmail.setText('{{ contract.contractEmail }}')
            representativeFirstName.setText('{{ contract.representativeFirstName }}')
            representativeLastName.setText('{{ contract.representativeLastName }}')
            representativeRole.setText('{{ contract.representativeRole }}')
            representativeEmail.setText('{{ contract.representativeEmail }}')
            otherSocialReason.setText('{{ contract.otherSocialReason }}')
            otherLocationStreet.setText('{{ contract.otherLocationStreet }}')
            otherLocationCity.setText('{{ contract.otherLocationCity }}')
            otherPostalCode.setText('{{ contract.otherPostalCode }}')
            otherPhoneNumber.setText('{{ contract.otherPhoneNumber }}')
            workerRole.setText('{{ contract.workerRole }}')
            startDate.setText('{{ contract.contractStartDate|date("m/d/Y") }}')
            endDate.setText('{{ contract.contractEndDate|date("m/d/Y") }}')
            tutorFirstName.setText('{{ contract.tutorFirstName }}')
            tutorLastName.setText('{{ contract.tutorLastName }}')
            tutorRole.setText('{{ contract.tutorRole }}')
            tutorEmail.setText('{{ contract.tutorEmail }}')
            tutorPhoneNumber.setText('{{ contract.tutorPhoneNumber }}')

            const pdfDataUri = await pdfDoc.saveAsBase64({ dataUri: true });
            const base64String = await pdfDoc.saveAsBase64()
            document.getElementById('pdf').src = pdfDataUri;
            console.log(base64String.length);
            console.log("1234".length);
        }
    </script>
</body>
{% endblock %}