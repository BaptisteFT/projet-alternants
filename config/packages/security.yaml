security:
    enable_authenticator_manager: true
    encoders:
        # use your user class name here
        App\Entity\User:
            # Use native password encoder
            # This value auto-selects the best possible hashing algorithm
            algorithm: auto



    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: false
            lazy: true
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator


            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    role_hierarchy:
        ROLE_USER:          [ROLE_USER]
        ROLE_ADMIN:         [ROLE_ADMIN, ROLE_USER]
        ROLE_SUPER_ADMIN:   [ROLE_SUPER_ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_ADMIN]
        ROLE_TEACHER:       [ROLE_TEACHER, ROLE_USER]
        ROLE_STUDENT:       [ROLE_STUDENT, ROLE_USER]
        ROLE_COMPANY:       [ROLE_COMPANY, ROLE_USER]
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/profil, roles: ROLE_USER }
        - { path: ^/create-token, roles: ROLE_STUDENT }
        # Admin acces control :
        - { path: ^/admin, roles: [ ROLE_ADMIN, ROLE_SUPER_ADMIN ] }
        - { path: ^/validate-work, roles: [ ROLE_ADMIN, ROLE_SUPER_ADMIN ] }
        - { path: ^/upload-work-contract, roles: [ ROLE_ADMIN, ROLE_SUPER_ADMIN ] }
        - { path: ^/create-user, roles: [ ROLE_ADMIN, ROLE_SUPER_ADMIN ] }
        - { path: ^/delete-user, roles: [ ROLE_ADMIN, ROLE_SUPER_ADMIN ] }
        - { path: ^/update-user, roles: [ ROLE_ADMIN, ROLE_SUPER_ADMIN ] }
        - { path: ^/excel-parse, roles: [ ROLE_ADMIN, ROLE_SUPER_ADMIN ] }
        - { path: ^/send-pdf, roles: [ ROLE_ADMIN, ROLE_SUPER_ADMIN ] }
        - { path: ^/validate-pdf, roles: [ ROLE_ADMIN, ROLE_SUPER_ADMIN ] }
        # Special acces control :
        - { path: ^/contract, roles: [ ROLE_ADMIN, ROLE_SUPER_ADMIN, ROLE_COMPANY ] }
        # Only Company and Admin have acces to contract
        - { path: ^/reviews, roles : [ ROLE_ADMIN, ROLE_SUPER_ADMIN, ROLE_TEACHER, ROLE_STUDENT]}
        - { path: ^/update-company, roles: ROLE_COMPANY }
        # Need to check who can update inside updateCompany




